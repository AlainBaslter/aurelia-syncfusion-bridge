{"version":3,"sources":["common/events.js"],"names":[],"mappings":";;;;;;;;AAAQ,U,SAAA,I;;AACA,e,+BAAA,S;;AACA,e,cAAA,S;;;AAMD,eAAS,cAAT,CAAwB,OAAxB,EAAiC;AACtC,YAAI,aAAJ;AACA,YAAI,aAAJ;AACA,YAAI,aAAa,QAAQ,UAAzB;AACA,YAAI,SAAS,EAAb;AACA,YAAI,YAAa,UAAU,QAAV,IAAsB,IAAI,SAAJ,EAAvC;AACA,YAAI,OAAO,UAAU,GAAV,CAAc,IAAd,CAAX;;AANsC,mCAO7B,CAP6B,EAOtB,GAPsB;AAQpC,iBAAO,WAAW,CAAX,CAAP;AACA,iBAAO,KAAK,IAAZ;AACA,cAAI,CAAC,KAAK,UAAL,CAAgB,UAAU,WAA1B,CAAL,EAA6C;AAC3C;AACD;AACD,cAAI,kBAAkB,KAAK,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAtB;AACA,cAAI,YAAY,KAAK,YAAL,CAAkB,gBAAgB,KAAhB,CAAsB,UAAU,WAAhC,EAA6C,CAA7C,CAAlB,CAAhB;AACA,iBAAO,SAAP,IAAoB;AAAA,mBAAK,UAAU,OAAV,EAAmB,eAAnB,EAAoC,CAApC,CAAL;AAAA,WAApB;AAfoC;;AAOtC,aAAK,IAAI,IAAI,CAAR,EAAW,MAAM,WAAW,MAAjC,EAAyC,IAAI,GAA7C,EAAkD,GAAlD,EAAuD;AAAA,2BAA9C,CAA8C,EAAvC,GAAuC;;AAAA,mCAInD;AAKH;AACD,eAAO,MAAP;AACD;;;;AAOM,eAAS,SAAT,CAAmB,OAAnB,EAAqC,IAArC,EAA+D;AAAA,YAAZ,IAAY,yDAAJ,EAAI;;AACpE,YAAI,QAAQ,IAAI,WAAJ,CAAgB,IAAhB,EAAsB;AAChC,kBAAQ,IADwB;AAEhC,mBAAS;AAFuB,SAAtB,CAAZ;AAIA,gBAAQ,aAAR,CAAsB,KAAtB;AACA,eAAO,KAAP;AACD","file":"common/events.js","sourceRoot":"/source/","sourcesContent":["import {Util} from './util';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {constants} from './constants';\r\n\r\n/**\r\n* To get binded events from the element\r\n* @param element The Element from which events acquired\r\n*/\r\nexport function getEventOption(element) {\r\n  let name;\r\n  let attr;\r\n  let attributes = element.attributes;\r\n  let option = {};\r\n  let container = (Container.instance || new Container());\r\n  let util = container.get(Util);\r\n  for (let i = 0, len = attributes.length; i < len; i++) {\r\n    attr = attributes[i];\r\n    name = attr.name;\r\n    if (!name.startsWith(constants.eventPrefix)) {\r\n      continue;\r\n    }\r\n    let actualEventName = name.split('.')[0];//Event name with constants event prefix\r\n    let eventName = util._unhyphenate(actualEventName.split(constants.eventPrefix)[1]);\r\n    option[eventName] = e => fireEvent(element, actualEventName, e);  // eslint-disable-line no-loop-func\r\n  }\r\n  return option;\r\n}\r\n/**\r\n* Fire DOM event on an element\r\n* @param element The Element which the DOM event will be fired on\r\n* @param name The Event's name\r\n* @param data Addition data to attach to an event\r\n*/\r\nexport function fireEvent(element: Element, name: string, data? = {}) {\r\n  let event = new CustomEvent(name, {\r\n    detail: data,\r\n    bubbles: true\r\n  });\r\n  element.dispatchEvent(event);\r\n  return event;\r\n}\r\n"]}