{"version":3,"sources":["grid/column.js"],"names":["inlineView","customElement","children","constants","generateBindables","Util","Column","aureliaTemplateString","elementPrefix","setTemplates","template","util","getBindablePropertyName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,gB,iBAAAA,U;AAAYC,mB,iBAAAA,a;AAAeC,c,iBAAAA,Q;AAAUC,e,iBAAAA,S;AAAWC,uB,iBAAAA,iB;AAAmBC,U,iBAAAA,I;;;wBAM9DC,M,WAJZN,gBAAcG,UAAUI,qBAAxB,C,UACAN,cAAiBE,UAAUK,aAA3B,Y,UACAJ,kBAAkB,SAAlB,EAA6B,CAAC,UAAD,EAAa,cAAb,EAA6B,gBAA7B,EAA+C,eAA/C,EAAgE,cAAhE,EAAgF,eAAhF,EAAiG,UAAjG,EAA6G,UAA7G,EAAyH,kBAAzH,EAA6I,YAA7I,EAA2J,cAA3J,EAA2K,mBAA3K,EAAgM,mBAAhM,EAAqN,YAArN,EAAmO,cAAnO,EAAmP,UAAnP,EAA+P,OAA/P,EAAwQ,iBAAxQ,EAA2R,iBAA3R,EAA8S,QAA9S,EAAwT,kBAAxT,EAA4U,YAA5U,EAA0V,iBAA1V,EAA6W,UAA7W,EAAyX,YAAzX,EAAuY,cAAvY,EAAuZ,qBAAvZ,EAA8a,UAA9a,EAA0b,WAA1b,EAAuc,SAAvc,EAAkd,MAAld,EAA0d,iBAA1d,EAA6e,SAA7e,EAAwf,OAAxf,CAA7B,C,UAGEF,SAAYC,UAAUK,aAAtB,c;;;;;;;yBACDC,Y,2BAAe;AACb,cAAI,KAAKC,QAAL,CAAc,CAAd,CAAJ,EAAsB;AACpB,gBAAIC,OAAO,IAAIN,IAAJ,EAAX;AACA,iBAAKM,KAAKC,uBAAL,CAA6B,UAA7B,CAAL,IAAiD,KAAKF,QAAL,CAAc,CAAd,EAAiBA,QAAlE;AACD;AACF,S;;;;;;iBAN0D,E","file":"grid/column.js","sourceRoot":"/source/","sourcesContent":["import {inlineView, customElement, children, constants, generateBindables, Util} from '../common/common';\r\n\r\n@inlineView(`${constants.aureliaTemplateString}`)\r\n@customElement(`${constants.elementPrefix}column`)\r\n@generateBindables('columns', ['clipMode', 'allowEditing', 'allowFiltering', 'allowGrouping', 'allowSorting', 'allowResizing', 'commands', 'cssClass', 'customAttributes', 'dataSource', 'defaultValue', 'disableHtmlEncode', 'displayAsCheckBox', 'editParams', 'editTemplate', 'editType', 'field', 'foreignKeyField', 'foreignKeyValue', 'format', 'headerTemplateID', 'headerText', 'headerTextAlign', 'isFrozen', 'isIdentity', 'isPrimaryKey', 'showInColumnChooser', 'template', 'textAlign', 'tooltip', 'type', 'validationRules', 'visible', 'width'])\r\n\r\nexport class Column {\r\n  @children(`${constants.elementPrefix}template`) template = [];\r\n  setTemplates() {\r\n    if (this.template[0]) {\r\n      let util = new Util();\r\n      this[util.getBindablePropertyName('template')] = this.template[0].template;\r\n    }\r\n  }\r\n}\r\n\r\n"]}